name: heroku-deploy-stop-start

on:
  schedule:
    - cron: "30 17 * * *" # UTC time, stop
    - cron: "30 22 * * *" # UTC time, start
  workflow_dispatch:
    inputs:
      actions:
        description: "action: deploy/stop/start"
        default: "deploy"
      env:
        description: "environment: Input the name of Environment. If left blank, the main secrets setting will be used by default."
        default: ""
env:
  auto-start-stop: true #only support in main secrets, if this is selected, then action will run auto stop heroku app on 2:00AM and auto start heroku app on 5:00AM beijing time
  test-env: true
  herokuEnv: ${{ github.event.inputs.env }}

jobs:
  jobenv:
    runs-on: ubuntu-latest
    outputs:
      stop: ${{ steps.isStopHeroku.outputs.action || 'false' }}
      start: ${{ steps.isStartHeroku.outputs.action || 'false' }}
      deploy: ${{ steps.isDeployHeroku.outputs.action || 'false' }}
      herokuEnv: ${{ github.event.inputs.env }} # todo
    steps:
      - id: isStopHeroku
        if: ${{ (github.event.schedule == '0 18 * * *' && env.auto-start-stop) || github.event.inputs.actions  == 'stop'}}
        run: echo "::set-output name=action::true"
      - id: isStartHeroku
        if: ${{ (github.event.schedule == '0 21 * * *' && env.auto-start-stop) || github.event.inputs.actions  == 'start'}}
        run: echo "::set-output name=action::true"
      - id: isDeployHeroku # TODO
        # if: ${{ github.event.inputs.actions  == 'start'}}
        run: echo "::set-output name=action::false"
  output:
    runs-on: ubuntu-latest
    needs: jobenv
    steps:
      - id: test-env
        if: ${{ env.test-env }}
        run: echo needs.jobenv.outputs.deploy is ${{needs.jobenv.outputs.deploy}}
      - run: echo needs.jobenv.outputs.stop is ${{needs.jobenv.outputs.stop}}
      - run: echo needs.jobenv.outputs.start is ${{needs.jobenv.outputs.start}}
      - run: echo herokuEnv is ${{env.herokuEnv}}
  heroku-deploy:
    if: ${{ github.event.inputs.actions == 'deploy' || needs.jobenv.outputs.deploy == 'true' }}
    runs-on: ubuntu-latest
    needs: jobenv
    environment: ${{ github.event.inputs.env }}
    steps:
      - run: echo APP_NAME is ${{secrets.APP_NAME}}
      - uses: actions/checkout@v2
      - uses: akhileshns/heroku-deploy@v3.6.8 # This is the action
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: ${{secrets.APP_NAME}} #Must be unique in Heroku
          heroku_email: ${{secrets.EMAIL}}
          usedocker: true
          # docker_build_args: |
          #   HD_UUID
        env:
          # 这是为了heroku，注意前缀有个HD，这是为了告诉heroku-deploy，这些变量需要传入到container 中。
          HD_UUID: ${{ secrets.HEROKU_V2RAY_UUID }} # UUID for v2ray user, 为了安全，一定要放入github action token中
          NODE_ENV: production
          SECRET_KEY: ${{ secrets.MY_SECRET_KEY }}
  stop-start:
    if: ${{ needs.jobenv.outputs.stop == 'true' || needs.jobenv.outputs.start == 'true' }}
    runs-on: ubuntu-latest
    needs: jobenv
    environment: ${{ github.event.inputs.env }}
    steps:
      - uses: actions/checkout@v2
      - uses: akhileshns/heroku-deploy@v3.7.8 # This is the action
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: ${{secrets.APP_NAME}} #Must be unique in Heroku
          heroku_email: ${{secrets.EMAIL}}
          justlogin: true
      - run: |
          echo action is ${{ github.event.inputs.actions }}
          echo needs.jobenv.outputs.stop is ${{needs.jobenv.outputs.stop}}
          echo needs.jobenv.outputs.start is ${{needs.jobenv.outputs.start}}
          if [[ ${{ needs.jobenv.outputs.stop}} == 'true' ]]; then heroku ps:scale web=0 -a ${{secrets.APP_NAME}} && echo "stop"; fi
          if [[ ${{ needs.jobenv.outputs.start}} == 'true' ]]; then heroku ps:scale web=1 -a ${{secrets.APP_NAME}} && echo "start"; fi
          heroku ps -a ${{secrets.APP_NAME}}
